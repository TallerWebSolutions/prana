{"name":"Prana","tagline":"Prana Framework","body":"# Prana\r\n\r\nPrana is a general purpose microframework for building extensible, modular applications and frameworks with strong code reusability features.\r\n\r\nPrana has some breakthrough concepts that abstract the small pieces common to every application. You can use Prana for building not only web applications but also other kind of applications, such as command line applications, sockets, etc.\r\n\r\nPrana provides an unified API for interacting with objects, from configuration settings, object metadata to complex media objects, everything can be created and manipulated with Prana.\r\n\r\n## Installation\r\n\r\n    $ npm install prana\r\n\r\n## Basic usage\r\n\r\nThe Prana core is formed of types, events and extensions. You can define your own types, describing business objects of your application:\r\n\r\n```js\r\nvar Prana = require('prana');\r\n\r\nvar application = new Prana();\r\napplication.type(new Prana.Type('myType', {\r\n  title: 'My Type',\r\n  description: 'This is one of my application types.'\r\n});\r\n```\r\n\r\nYou can then start adding objects of that type, in an active records fashion:\r\n\r\n```js\r\nvar MyType = application.type('myType');\r\nvar myTypeInstance = new MyType({\r\n  key: 1,\r\n  someOtherProperty: 'The value of another property MyType has.'\r\n});\r\nmyTypeInstance.save();\r\n```\r\n\r\nThere's also the application.new() shortcut you can use to create new objects:\r\n\r\n```js\r\nvar myTypeInstance = application.new('myType', {\r\n  key: 1,\r\n  someOtherProperty: 'The value of another property MyType has.'\r\n});\r\nmyTypeInstance.save();\r\n```\r\n\r\nIn a similar way you save the item you can also get a list of items and also load a specific item from the storage:\r\n\r\n```js\r\nvar MyType = application.get('myType');\r\nMyType.list(function(err, items) {\r\n  // Do something with items.\r\n});\r\nMyType.load(1, function(err, item) {\r\n  // Do something with item.\r\n});\r\n```\r\n\r\nFor more examples check the examples folder.\r\n\r\n## Events\r\n\r\nBoth Prana instances (applications) and types are Event Emitters, this means you can add listeners to react on events emitted by these objects.\r\n\r\nThere are list, load, save, delete events on both application and type scope.\r\n\r\n```js\r\n// Global event listener.\r\napplication.on('save', function(type, item) {\r\n  console.log('Global save event fired. Item type: ' + type.name + '.');\r\n});\r\n\r\n// Define our type.\r\nvar someType = new Prana.Type('someType', {\r\n  title: 'Some Type',\r\n  description: 'Some example type.'\r\n});\r\n\r\n// Type specific event listener.\r\nsomeType.on('save', function(item) {\r\n  console.log('Some Type specific save event fired.');\r\n});\r\n```\r\n\r\nYou can then get the constructor of our type. Once save() method is called on a item all 'save' events are fired.\r\n\r\n```js\r\nvar SomeType = application.type(someType);\r\n\r\n// Create a new Some Type item.\r\nvar someTypeItem = new Cache({\r\n  key: 'some-key',\r\n  value: 'some-value'\r\n});\r\n\r\n// Save item to memory. Fire events.\r\nsomeTypeItem.save();\r\n```\r\n\r\n## Extensions\r\n\r\nThings start to get more interesting when we add some extensions to the loop.\r\n\r\nYou can add extensions programmatically like this:\r\n\r\n```js\r\n// The prototype of our programmatically created extension.\r\nvar myExtensionPrototype = {\r\n\r\n  // The list hook allow you to alter every item on the system they get listed.\r\n  list: function(type, items, callback) {\r\n    // Add a property to all types. You can use type to act only on certain\r\n    // items of a certain type.\r\n    for (var itemKey in items) {\r\n      items[itemKey].property = 'value';\r\n    }\r\n    callback();\r\n  }\r\n\r\n};\r\n\r\n// Add an extension programmatically.\r\napplication.extension(new Prana.Extension(application, 'my-extension', myExtensionPrototype, {\r\n  title: 'My Extension',\r\n  description: 'This is just an example extension.'\r\n}));\r\n```\r\n\r\nYou can also scan a directory for extensions:\r\n\r\n```js\r\n// Scan a folder for extensions.\r\nPrana.Extension.scan(__dirname + '/extensions', function(err, extensions) {\r\n  // Add all found extensions.\r\n  for (var extensionName in extensions) {\r\n    var extension = extensions[extensionName];\r\n    application.extension(new Prana.Extension(application, extensionName, extension.prototype, extension.info));\r\n  }\r\n});\r\n```\r\n\r\nThis will look for two kind of files one named EXTENSIONNAME.extension.json that contains extension information. And EXTENSIONNAME.js that contains the extension protoype.\r\n\r\nFor example, you can have a folder called 'example' in the 'extensions' dir with example.extension.json and example.js files with the following content:\r\n\r\n### example.extension.json\r\n\r\n```json\r\n{\r\n  \"title\": \"Example Extension\",\r\n  \"description\": \"This is just an example extension.\"\r\n}\r\n```\r\n\r\n### example.js\r\n\r\n```js\r\nvar example = module.exports = {\r\n\r\n  // The list hook allow you to alter every item on the system they get listed.\r\n  list: function(type, items, callback) {\r\n    // Add a property to all types. You can use type to act only on items of a\r\n    // specific type.\r\n    for (var itemKey in items) {\r\n      items[itemKey].property = 'value';\r\n    }\r\n    callback();\r\n  }\r\n\r\n};\r\n```\r\n\r\nFor more examples check the examples folder.\r\n","google":"UA-43023631-1","note":"Don't delete this file! It's used internally to help with page regeneration."}